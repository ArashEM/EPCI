#!groovy
//********************************************************************************************                                                        
//	  ______                                __                ________  __       __ 
//	 /      \                              |  \              |        \|  \     /  \
//	|  $$$$$$\  ______   ______    _______ | $$____          | $$$$$$$$| $$\   /  $$
//	| $$__| $$ /      \ |      \  /       \| $$    \  ______ | $$__    | $$$\ /  $$$
//	| $$    $$|  $$$$$$\ \$$$$$$\|  $$$$$$$| $$$$$$$\|      \| $$  \   | $$$$\  $$$$
//	| $$$$$$$$| $$   \$$/      $$ \$$    \ | $$  | $$ \$$$$$$| $$$$$   | $$\$$ $$ $$
//	| $$  | $$| $$     |  $$$$$$$ _\$$$$$$\| $$  | $$        | $$_____ | $$ \$$$| $$
//	| $$  | $$| $$      \$$    $$|       $$| $$  | $$        | $$     \| $$  \$ | $$
//	 \$$   \$$ \$$       \$$$$$$$ \$$$$$$$  \$$   \$$         \$$$$$$$$ \$$      \$$
//	                                                                                
//	                                                                                
//	                        
//********************************************************************************************
pipeline{
    agent none 
    stages{
		/**
		* checkout repository in master node
		* files are stashed to be used in slaves 
		*/
        stage('checkout'){
            agent {
                label 'master'
            }
            steps {
				checkout([$class: 'GitSCM',
					branches: [[name: '*/master']],
					extensions: [[$class: 'CloneOption', timeout: 120]],
					gitTool: 'Default', 
					userRemoteConfigs: [[url: 'https://github.com/ArashEM/EPCI.git']]
				])
                stash includes: 'FW/sources/**', name: 'firmware-src'
            }
        }
		/**
		* kernel module build and synthesis are independednt
		*/
		stage('parallel build')
		{
			parallel {
				// Compile kernel module and test application 
				stage('build'){
					agent {
						label 'dh-01'
					}
					steps {
						unstash 'firmware-src'
						dir('FW/sources/driver'){
							sh 'make clean'
							sh 'make'
						}
						dir('FW/sources/tests/mem'){
						    sh 'make clean'
						    sh 'make'
						}
					}
					post {
						success {
							archiveArtifacts 'FW/sources/driver/build/*.ko'
							stash includes:  'FW/sources/driver/build/*.ko', name: 'kernel-object'
							stash includes:  'FW/sources/tests/mem/build/*', name: 'test-app'
						}
						cleanup {
							cleanWs()
						}
					}
					
				}
				// Generate bit file for FPGA 
				stage('synthesis') {
					agent {
						label 'ise-01'
					}
					steps {
						unstash 'firmware-src'
						dir('FW/sources/hdl'){
							sh 'make clean'
							sh 'make mcs'
						}
					}
					post {
						success {
							archiveArtifacts '/FW/sources/hdl/build/*.bit'
							stash includes:   'FW/sources/hdl/build/*.bit', name: 'bitfile'
							archiveArtifacts '/FW/sources/hdl/build/*.mcs'
						}
						cleanup {
							cleanWs()
						}
					}
				}
			}
        }
		stage('deploy')
		{
			agent {
                label 'dh-01'
            }
			/**
			* gather all artifacts to be deployed in EPCI board 
			*/
            steps {
				unstash 'firmware-src'
				unstash 'bitfile'
				unstash 'kernel-object'
				dir('FW/sources/hdl') {
					sh 'sudo openocd -f scripts/epci-openocd.cfg'
					sh 'sudo ./scripts/epci_configure'
				}
				dir('FW/sources/driver') {
					sh 'sudo ./scripts/epci_load'
				}
			}
			post {
				cleanup {
					cleanWs()
				}
			}
		}
		
		stage('Test'){
		    agent {
                label 'dh-01'
            }
			/**
			* Testing all aspect of EPCI driver/firmware 
			*/
            steps {
                unstash 'firmware-src'
                unstash 'test-app'
				// run test application
                dir('FW/sources/tests/mem') {
                    sh './run_mem_bt.sh 100'
                }
				// uload driver
                dir('FW/sources/driver')
				{
					sh 'sudo ./scripts/epci_unload'
				}
            }
            post {
			    cleanup {
				    cleanWs()
			    }
			}
		}
		
    }
    
}